package com.iusmob.adklein.demo.activity;import android.graphics.Point;import android.os.Bundle;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.iusmob.adklein.ad.AdKleinError;import com.iusmob.adklein.ad.AdKleinNativeAd;import com.iusmob.adklein.ad.AdKleinNativeAdData;import com.iusmob.adklein.ad.AdKleinNativeAdListener;import com.iusmob.adklein.demo.DemoConstants;import com.iusmob.adklein.demo.R;import com.iusmob.adklein.demo.adapter.NativeAdAdapter;import com.iusmob.adklein.demo.entity.NativeAdBean;import com.iusmob.adklein.demo.widget.KleinSmartRefreshLayout;import com.iusmob.adklein.library.utils.LogUtils;import com.scwang.smartrefresh.layout.api.RefreshLayout;import com.scwang.smartrefresh.layout.listener.OnRefreshLoadMoreListener;import java.util.ArrayList;import java.util.List;public class NativeAdListActivity extends AppCompatActivity implements OnRefreshLoadMoreListener {    private KleinSmartRefreshLayout refreshLayout;    private NativeAdAdapter mAdapter;    private AdKleinNativeAd expressAd;    private final List<NativeAdBean> dataList = new ArrayList<>();    private int refreshType;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_express_reycler_view);        initView();        initData();    }    private void initView() {        RecyclerView recyclerView = findViewById(R.id.recycler_view);        refreshLayout = findViewById(R.id.refreshLayout);        refreshLayout.setOnRefreshLoadMoreListener(this);        recyclerView.setHasFixedSize(true);        recyclerView.setLayoutManager(new LinearLayoutManager(this));        mAdapter = new NativeAdAdapter(this);        recyclerView.setAdapter(mAdapter);    }    private void initData() {        expressAd = new AdKleinNativeAd(                this,                DemoConstants.FEED_NATIVE_ID,                new AdKleinNativeAdListener() {                    @Override                    public void onAdLoaded(List<AdKleinNativeAdData> list) {                        for (int i = 0; i < list.size(); i++) {                            int index = i * 5;                            AdKleinNativeAdData nativeAdData = list.get(i);                            if (index <= dataList.size()) {                                dataList.add(index, new NativeAdBean(nativeAdData));                            } else {                                dataList.add(new NativeAdBean(nativeAdData));                            }                        }                        mAdapter.addData(dataList);                        refreshLayout.finish(refreshType, true, false);                    }                    @Override                    public void onAdClose(AdKleinNativeAdData nativeAdData) {                        LogUtils.i(this, "onAdClose");                        mAdapter.removeADView(nativeAdData);                    }                    @Override                    public void onError(AdKleinError adKleinError) {                        refreshLayout.finish(refreshType, false, false);                        LogUtils.i(this, "adKleinError");                    }                    @Override                    public void onAdShow() {                        LogUtils.i(this, "onAdShow");                    }                    @Override                    public void onAdClicked() {                        LogUtils.i(this, "onAdClicked");                    }                },                getScreenWidth(), 0.0F        );        loadData();    }    private void mockNormalDataRequest() {        int itemCount = mAdapter.getItemCount();        for (int i = 0; i < DemoConstants.ITEMS_COUNT; i++) {            dataList.add(new NativeAdBean("No." + (itemCount + i) + " Normal Data"));            mAdapter.notifyItemInserted(itemCount + i);        }    }    @Override    public void onLoadMore(@NonNull RefreshLayout refreshLayout) {        refreshType = KleinSmartRefreshLayout.TYPE_LOAD_MORE;        loadData();    }    @Override    public void onRefresh(@NonNull RefreshLayout refreshLayout) {        refreshType = KleinSmartRefreshLayout.TYPE_FRESH;        dataList.clear();        mAdapter.clearData();        loadData();    }    /**     * 加载数据和广告     */    private void loadData() {        dataList.clear();        mockNormalDataRequest();        expressAd.load(DemoConstants.AD_COUNT);    }    private float getScreenWidth() {        Point screenSize = new Point();        getWindowManager().getDefaultDisplay().getSize(screenSize);        return (float) screenSize.x;    }    @Override    protected void onDestroy() {        super.onDestroy();    }}