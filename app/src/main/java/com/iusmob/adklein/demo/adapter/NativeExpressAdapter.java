package com.iusmob.adklein.demo.adapter;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import com.iusmob.adklein.ad.AdKleinNativeExpressAdData;import com.iusmob.adklein.demo.R;import com.iusmob.adklein.demo.entity.NativeExpressAdBean;import java.util.ArrayList;import java.util.List;public class NativeExpressAdapter extends RecyclerView.Adapter<NativeExpressAdapter.NativeExpressViewHolder> {    private static final int TYPE_DATA = 0;    private static final int TYPE_AD = 1;    private List<NativeExpressAdBean> dataList = new ArrayList<>();    public NativeExpressAdapter() {    }    /**     * 添加数据     */    public void addData(List<NativeExpressAdBean> list) {        int startPosition = dataList.size();        dataList.addAll(list);        if (startPosition <= 0) {            notifyDataSetChanged();        } else {            notifyItemRangeInserted(startPosition + 1, dataList.size() - startPosition);        }    }    public void removeADView(AdKleinNativeExpressAdData kleinNativeExpressAd) {        for (int i = 0; i < dataList.size(); i++) {            NativeExpressAdBean normalItem = dataList.get(i);            if (normalItem.getKleinNativeExpressAdData() != null && normalItem.getKleinNativeExpressAdData() == kleinNativeExpressAd) {                // 释放广告对象                kleinNativeExpressAd.release();                // 从数据源中移除                dataList.remove(normalItem);                // 通知刷新Adapter                notifyDataSetChanged();                break;            }        }    }    /**     * 刷新数据     */    public void clearData() {        dataList.clear();        notifyDataSetChanged();    }    @NonNull    @Override    public NativeExpressViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {        int layoutId = viewType == TYPE_AD ? R.layout.item_express_ad : R.layout.item_data;        View view = LayoutInflater.from(viewGroup.getContext()).inflate(layoutId, null);        return new NativeExpressViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull NativeExpressViewHolder customViewHolder, int position) {        int viewType = getItemViewType(position);        NativeExpressAdBean item = dataList.get(position);        if (TYPE_AD == viewType) {            AdKleinNativeExpressAdData expressAd = item.getKleinNativeExpressAdData();            View adView = expressAd.getView();            if (customViewHolder.container.getChildCount() > 0 && customViewHolder.container.getChildAt(0) == adView) {                return;            }            if (customViewHolder.container.getChildCount() > 0) {                customViewHolder.container.removeAllViews();            }            if (adView != null && adView.getParent() != null) {                ((ViewGroup) adView.getParent()).removeView(adView);            }            customViewHolder.container.addView(adView);            expressAd.render();        } else {            customViewHolder.title.setText(item.getTitle());        }    }    @Override    public int getItemViewType(int position) {        NativeExpressAdBean data = dataList.get(position);        if (data.getKleinNativeExpressAdData() != null) {            return TYPE_AD;        } else {            return TYPE_DATA;        }    }    @Override    public int getItemCount() {        if (dataList != null) {            return dataList.size();        } else {            return 0;        }    }    static class NativeExpressViewHolder extends RecyclerView.ViewHolder {        public TextView title;        public ViewGroup container;        NativeExpressViewHolder(View view) {            super(view);            title = view.findViewById(R.id.title);            container = view.findViewById(R.id.express_ad_container);        }    }}