package com.iusmob.adklein.demo.adapter;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.iusmob.adklein.ad.AdKleinNativeAdData;import com.iusmob.adklein.demo.R;import com.iusmob.adklein.demo.entity.NativeAdBean;import java.util.ArrayList;import java.util.List;public class NativeAdAdapter extends RecyclerView.Adapter<NativeAdAdapter.NativeViewHolder> {    private static final int TYPE_DATA = 0;    private static final int TYPE_AD = 1;    private List<NativeAdBean> dataList = new ArrayList<>();    private Context context;    public NativeAdAdapter(Context context) {        this.context = context;    }    /**     * 添加数据     */    public void addData(List<NativeAdBean> list) {        int startPosition = dataList.size();        dataList.addAll(list);        if (startPosition <= 0) {            notifyDataSetChanged();        } else {            notifyItemRangeInserted(startPosition + 1, dataList.size() - startPosition);        }    }    public void removeADView(AdKleinNativeAdData kleinNativeAd) {        for (int i = 0; i < dataList.size(); i++) {            NativeAdBean normalItem = dataList.get(i);            if (normalItem.getKleinNativeAdData() != null && normalItem.getKleinNativeAdData() == kleinNativeAd) {                // 从数据源中移除                dataList.remove(normalItem);                // 通知刷新Adapter                notifyDataSetChanged();                break;            }        }    }    /**     * 刷新数据     */    public void clearData() {        dataList.clear();        notifyDataSetChanged();    }    @NonNull    @Override    public NativeViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {        int layoutId = viewType == TYPE_AD ? R.layout.item_express_ad : R.layout.item_data;        View view = LayoutInflater.from(viewGroup.getContext()).inflate(layoutId, null);        return new NativeViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull NativeViewHolder customViewHolder, int position) {        int viewType = getItemViewType(position);        NativeAdBean item = dataList.get(position);        if (TYPE_AD == viewType) {            AdKleinNativeAdData expressAd = item.getKleinNativeAdData();            showNativeAd(expressAd, customViewHolder.container);        } else {            customViewHolder.title.setText(item.getTitle());        }    }    @Override    public int getItemViewType(int position) {        NativeAdBean data = dataList.get(position);        if (data.getKleinNativeAdData() != null) {            return TYPE_AD;        } else {            return TYPE_DATA;        }    }    @Override    public int getItemCount() {        if (dataList != null) {            return dataList.size();        } else {            return 0;        }    }    private void showNativeAd(AdKleinNativeAdData adKleinNativeAd, ViewGroup adContainer) {        switch (adKleinNativeAd.getType()) {            case IMAGE_SINGLE_SMALL:                renderSmallImage(adKleinNativeAd, adContainer);                break;            case IMAGE_SINGLE_LARGE:                renderLargeImage(adKleinNativeAd, adContainer);                break;            case IMAGE_THREE_SMALL:                renderThreeImages(adKleinNativeAd, adContainer);                break;            case VIDEO:                loadVideo(adKleinNativeAd, adContainer);                break;        }    }    private void renderSmallImage(AdKleinNativeAdData kleinNativeAd, ViewGroup adContainer) {        View adView = LayoutInflater.from(context).inflate(R.layout.item_native_small_image,                adContainer,                false);        TextView title = adView.findViewById(R.id.ad_title);        TextView desc = adView.findViewById(R.id.ad_desc);        ImageView image = adView.findViewById(R.id.image);        ImageView ivClose = adView.findViewById(R.id.iv_close);        ivClose.setOnClickListener(v -> {            kleinNativeAd.destroy(kleinNativeAd);        });        title.setText(kleinNativeAd.getTitle());        desc.setText(kleinNativeAd.getDesc());        Glide.with(adView).load(kleinNativeAd.getImages().get(0)).into(image);        // 绑定view        List<View> clickViews = new ArrayList<>();        clickViews.add(adView);        kleinNativeAd.bindView(kleinNativeAd, adContainer, adView, null, clickViews);    }    private void renderLargeImage(AdKleinNativeAdData kleinNativeAd, ViewGroup adContainer) {        View adView = LayoutInflater.from(context).inflate(R.layout.item_native_large_image,                adContainer,                false);        TextView title = adView.findViewById(R.id.ad_title);        TextView desc = adView.findViewById(R.id.ad_desc);        ImageView image = adView.findViewById(R.id.image);        ImageView ivClose = adView.findViewById(R.id.iv_close);        ivClose.setOnClickListener(v -> {            kleinNativeAd.destroy(kleinNativeAd);        });        title.setText(kleinNativeAd.getTitle());        desc.setText(kleinNativeAd.getDesc());        Glide.with(adView).load(kleinNativeAd.getImages().get(0)).into(image);        // 绑定view        List<View> clickViews = new ArrayList<>();        clickViews.add(adView);        kleinNativeAd.bindView(kleinNativeAd, adContainer, adView, null, clickViews);    }    private void renderThreeImages(AdKleinNativeAdData kleinNativeAd, ViewGroup adContainer) {        View adView = LayoutInflater.from(context).inflate(R.layout.item_native_three_image,                adContainer,                false);        TextView title = adView.findViewById(R.id.ad_title);        TextView desc = adView.findViewById(R.id.ad_desc);        ImageView image1 = adView.findViewById(R.id.image1);        ImageView image2 = adView.findViewById(R.id.image2);        ImageView image3 = adView.findViewById(R.id.image3);        ImageView ivClose = adView.findViewById(R.id.iv_close);        ivClose.setOnClickListener(v -> {            kleinNativeAd.destroy(kleinNativeAd);        });        title.setText(kleinNativeAd.getTitle());        desc.setText(kleinNativeAd.getDesc());        Glide.with(adView).load(kleinNativeAd.getImages().get(0)).into(image1);        Glide.with(adView).load(kleinNativeAd.getImages().get(1)).into(image2);        Glide.with(adView).load(kleinNativeAd.getImages().get(2)).into(image3);        // 绑定view        List<View> clickViews = new ArrayList<>();        clickViews.add(adView);        kleinNativeAd.bindView(kleinNativeAd, adContainer, adView, null, clickViews);    }    private void loadVideo(AdKleinNativeAdData kleinNativeAd, ViewGroup adContainer) {        View adView = LayoutInflater.from(context).inflate(R.layout.item_native_video, adContainer,                false);        TextView title = adView.findViewById(R.id.ad_title);        TextView desc = adView.findViewById(R.id.ad_desc);        ImageView ivClose = adView.findViewById(R.id.iv_close);        ivClose.setOnClickListener(v -> {            kleinNativeAd.destroy(kleinNativeAd);        });        title.setText(kleinNativeAd.getTitle());        desc.setText(kleinNativeAd.getDesc());        // MediaView container        ViewGroup video_wrapper = adView.findViewById(R.id.video_wrapper);        // 绑定view        List<View> clickViews = new ArrayList<>();        clickViews.add(adView);        kleinNativeAd.bindView(kleinNativeAd, adContainer, adView, video_wrapper, clickViews);    }    static class NativeViewHolder extends RecyclerView.ViewHolder {        public TextView title;        public ViewGroup container;        NativeViewHolder(View view) {            super(view);            title = view.findViewById(R.id.title);            container = view.findViewById(R.id.express_ad_container);        }    }}